#!/bin/bash

shell_get_value()
{
 local GET_VALUE=`echo $QUERY_STRING | sed -n "s/^.*$1=\\([^&]*\\).*$/\\1/p"`
 echo $GET_VALUE
}

shell_url()
{
 local LOCAL_URL=""

 if [ "$HTTPS" == "on" ]
 then
  LOCAL_URL="https://"
 else
  LOCAL_URL="http://"
 fi

 LOCAL_URL+="${SERVER_NAME}:${SERVER_PORT}${REQUEST_URI%\?*}"

 echo $LOCAL_URL
}

check_value_integer()
{
 local LOCAL_SHELL_INTEGERVALUE="$1"
 local LOCAL_SHELL_INTEGERMIN="$2"
 local LOCAL_SHELL_INTEGERMAX="$3"
 local LOCAL_SHELL_INTEGERDEFAULT="$4"

 if [ -z "$LOCAL_SHELL_INTEGERVALUE" ]
 then
  echo "$LOCAL_SHELL_INTEGERDEFAULT"
  exit
 fi

 if [ ! -z "${LOCAL_SHELL_INTEGERVALUE//[0-9]}" ]
 then
  echo "$LOCAL_SHELL_INTEGERDEFAULT"
  exit
 fi

 if [ "$LOCAL_SHELL_INTEGERVALUE" -lt "$LOCAL_SHELL_INTEGERMIN" ]
 then
  echo "$LOCAL_SHELL_INTEGERDEFAULT"
  exit
 fi

 if [ "$LOCAL_SHELL_INTEGERVALUE" -gt "$LOCAL_SHELL_INTEGERMAX" ]
 then
  echo "$SHELL_SHELL_INTEGERDEFAULT"
  exit
 fi

 echo "$LOCAL_SHELL_INTEGERVALUE"
}

calculate_bbox()
{
 local LOCAL_SHELL_ZOOMLEVEL="$1"
 local LOCAL_SHELL_CENTERX="$2"
 local LOCAL_SHELL_CENTERY="$3"

 local LOCAL_ZOOM_DIVIDE
 local LOCAL_HALFWIDTH
 local LOCAL_HALFHEIGHT
 local LOCAL_BBOX_MINX
 local LOCAL_BBOX_MAXX
 local LOCAL_BBOX_MINY
 local LOCAL_BBOX_MAXY
 local LOCAL_OFFSET_X
 local LOCAL_OFFSET_Y


 if [ "$LOCAL_SHELL_ZOOMLEVEL" -lt 1 ]
 then
  LOCAL_SHELL_ZOOMLEVEL=1
  exit
 fi

 let "LOCAL_ZOOM_DIVIDE=($LOCAL_SHELL_ZOOMLEVEL * $CONFIG_WMS_ZOOMLEVEL_STEP) ** 2"

 let "LOCAL_MAX_WIDTH=$CONFIG_WMS_BBOX_MAXX - $CONFIG_WMS_BBOX_MINX"
 let "LOCAL_MAX_HEIGHT=$CONFIG_WMS_BBOX_MAXY - $CONFIG_WMS_BBOX_MINY"
 let "LOCAL_ZOOM_WIDTH=$CONFIG_WMS_BBOX_MAXWIDTH / $LOCAL_ZOOM_DIVIDE"
 let "LOCAL_ZOOM_HEIGHT=$CONFIG_WMS_BBOX_MAXHEIGHT / $LOCAL_ZOOM_DIVIDE"

 if [ "$LOCAL_ZOOM_WIDTH" -gt "$LOCAL_MAX_WIDTH" ]
 then
  let "LOCAL_CENTERX=$CONFIG_WMS_BBOX_MINX + ($LOCAL_MAX_WIDTH / 2)"
  let "LOCAL_ZOOM_HALFWIDTH=$LOCAL_ZOOM_WIDTH / 2"
  let "LOCAL_BBOX_MINX=$LOCAL_CENTERX - $LOCAL_ZOOM_HALFWIDTH"
  let "LOCAL_BBOX_MAXX=$LOCAL_CENTERX + $LOCAL_ZOOM_HALFWIDTH"
 else
  let "LOCAL_ZOOM_HALFWIDTH=$LOCAL_ZOOM_WIDTH / 2"
  let "LOCAL_BBOX_MINX=$LOCAL_SHELL_CENTERX - $LOCAL_ZOOM_HALFWIDTH"
  let "LOCAL_BBOX_MAXX=$LOCAL_SHELL_CENTERX + $LOCAL_ZOOM_HALFWIDTH"

  if [ "$LOCAL_BBOX_MINX" -lt "$CONFIG_WMS_BBOX_MINX" ]
  then
   let "LOCAL_OFFSET_X=$CONFIG_WMS_BBOX_MINX - $LOCAL_BBOX_MINX"
   let "LOCAL_BBOX_MINX+=$LOCAL_OFFSET_X"
   let "LOCAL_BBOX_MAXX+=$LOCAL_OFFSET_X"
  fi

  if [ "$CONFIG_WMS_BBOX_MAXX" -lt "$LOCAL_BBOX_MAXX" ]
  then
   let "LOCAL_OFFSET_X=$LOCAL_BBOX_MAXX - $CONFIG_WMS_BBOX_MAXX"
   let "LOCAL_BBOX_MINX-=$LOCAL_OFFSET_X"
   let "LOCAL_BBOX_MAXX-=$LOCAL_OFFSET_X"
  fi
 fi

 if [ "$LOCAL_ZOOM_HEIGHT" -gt "$LOCAL_MAX_HEIGHT" ]
 then
  let "LOCAL_CENTERY=$CONFIG_WMS_BBOX_MINY + ($LOCAL_MAX_HEIGHT / 2)"
  let "LOCAL_ZOOM_HALFHEIGHT=$LOCAL_ZOOM_HEIGHT / 2"
  let "LOCAL_BBOX_MINY=$LOCAL_CENTERY - $LOCAL_ZOOM_HALFHEIGHT"
  let "LOCAL_BBOX_MAXY=$LOCAL_CENTERY + $LOCAL_ZOOM_HALFHEIGHT"
 else
  let "LOCAL_ZOOM_HALFHEIGHT=$LOCAL_ZOOM_HEIGHT / 2"
  let "LOCAL_BBOX_MINY=$LOCAL_SHELL_CENTERY - $LOCAL_ZOOM_HALFHEIGHT"
  let "LOCAL_BBOX_MAXY=$LOCAL_SHELL_CENTERY + $LOCAL_ZOOM_HALFHEIGHT"

  if [ "$LOCAL_BBOX_MINY" -lt "$CONFIG_WMS_BBOX_MINY" ]
  then
   let "LOCAL_OFFSET_Y=$CONFIG_WMS_BBOX_MINY - $LOCAL_BBOX_MINY"
   let "LOCAL_BBOX_MINY+=$LOCAL_OFFSET_Y"
   let "LOCAL_BBOX_MAXY+=$LOCAL_OFFSET_Y"
  fi

  if [ "$CONFIG_WMS_BBOX_MAXY" -lt "$LOCAL_BBOX_MAXY" ]
  then
   let "LOCAL_OFFSET_Y=$LOCAL_BBOX_MAXY - $CONFIG_WMS_BBOX_MAXY"
   let "LOCAL_BBOX_MINY-=$LOCAL_OFFSET_Y"
   let "LOCAL_BBOX_MAXY-=$LOCAL_OFFSET_Y"
  fi
 fi

 echo "$LOCAL_BBOX_MINX,$LOCAL_BBOX_MINY,$LOCAL_BBOX_MAXX,$LOCAL_BBOX_MAXY"
}

download_image_wms()
{
 local LOCAL_SHELL_BBOX="$1"

 local QUERY_STRING

 QUERY_STRING="request=GetMap&service=WMS&version=1.3.0"
 QUERY_STRING+="&map=${CONFIG_WMS_FILE_QGISPROJECT}"

 QUERY_STRING+="&layers=$CONFIG_WMS_QUERY_LAYERS_MAPIMAGE"
 QUERY_STRING+="&styles=$CONFIG_WMS_QUERY_STYLES"
 QUERY_STRING+="&crs=$CONFIG_WMS_QUERY_CRS"
 QUERY_STRING+="&time=$CONFIG_WMS_QUERY_TIMEFORMAT"

 QUERY_STRING+="&bbox=$LOCAL_SHELL_BBOX"

 QUERY_STRING+="&transparent=$CONFIG_WMS_MAPIMAGE_TRANSPARENT"
 QUERY_STRING+="&bgcolor=$CONFIG_WMS_MAPIMAGE_BGCOLOR"
 QUERY_STRING+="&width=$CONFIG_WMS_MAPIMAGE_WIDTH"
 QUERY_STRING+="&height=$CONFIG_WMS_MAPIMAGE_HEIGHT"
 QUERY_STRING+="&format=$CONFIG_WMS_MAPIMAGE_FORMAT"

 /usr/bin/cgi-fcgi -bind -connect $CONFIG_WMS_SOCKET_QGISSERVER
}

download_info_wms()
{
 local LOCAL_SHELL_BBOX="$1"
 local LOCAL_SHELL_X="$2"
 local LOCAL_SHELL_Y="$3"

 local QUERY_STRING

 QUERY_STRING="request=GetFeatureInfo&service=WMS&version=1.3.0"
 QUERY_STRING+="&map=${CONFIG_WMS_FILE_QGISPROJECT}"

 QUERY_STRING+="&info_format=text/html"

 QUERY_STRING+="&layers=$CONFIG_WMS_QUERY_LAYERS_MAPTIP"
 QUERY_STRING+="&query_layers=$CONFIG_WMS_QUERY_LAYERS_MAPTIP"
 QUERY_STRING+="&styles=$CONFIG_WMS_QUERY_STYLES"
 QUERY_STRING+="&crs=$CONFIG_WMS_QUERY_CRS"

 QUERY_STRING+="&bbox=$LOCAL_SHELL_BBOX"

 QUERY_STRING+="&width=$CONFIG_WMS_MAPIMAGE_WIDTH"
 QUERY_STRING+="&height=$CONFIG_WMS_MAPIMAGE_HEIGHT"
 QUERY_STRING+="&i=$LOCAL_SHELL_X"
 QUERY_STRING+="&j=$LOCAL_SHELL_Y"

 /usr/bin/cgi-fcgi -bind -connect $CONFIG_WMS_SOCKET_QGISSERVER
}

convert_html_data()
{
 local LOCAL_DATA="$1"

 local LOCAL_DATA_INDEX
 local LOCAL_DATA_LENGTH
 local LOCAL_HTML

 LOCAL_DATA_LENGTH=${#LOCAL_DATA}
 LOCAL_DATA_INDEX=0
 LOCAL_HTML=""

 while [ $LOCAL_DATA_INDEX -lt $LOCAL_DATA_LENGTH ]
 do
  case ${LOCAL_DATA:$LOCAL_DATA_INDEX:1} in
   "\\")
    let "LOCAL_DATA_INDEX++"

    if [ $LOCAL_DATA_INDEX -ge $LOCAL_DATA_LENGTH ]
    then
     break
    fi

    if [ ${LOCAL_DATA:$LOCAL_DATA_INDEX:1} == "n" ]
    then
     LOCAL_HTML+="<br>\n"
    fi

    if [ ${LOCAL_DATA:$LOCAL_DATA_INDEX:2} == "\\n" ]
    then
     LOCAL_HTML+="<br>\n"
     let "LOCAL_DATA_INDEX++"
    fi
    ;;
   "<")
    LOCAL_HTML+="&lt;"
    ;;
   ">")
    LOCAL_HTML+="&gt;"
    ;;
   "&")
    LOCAL_HTML+="&amp;"
    ;;
   *)
    LOCAL_HTML+="${LOCAL_DATA:$LOCAL_DATA_INDEX:1}"
    ;;
  esac

  let "LOCAL_DATA_INDEX++"
 done

 echo "$LOCAL_HTML"
}

convert_arraydatarow_stringdatarow()
{
 local LOCAL_SHELL_STRINGDATAROW="$1"

 local LOCAL_SHELL_STRINGDATAROW_LENGTH
 local LOCAL_SHELL_STRINGDATAROW_INDEX
 local LOCAL_CHARACTER
 local LOCAL_ARRAY_INDEX

 GLOBAL_STRINGDATAROW_ARRAY=()

 LOCAL_SHELL_STRINGDATAROW_LENGTH=${#LOCAL_SHELL_STRINGDATAROW}
 LOCAL_SHELL_STRINGDATAROW_INDEX=0
 LOCAL_ARRAY_INDEX=0

 while [ $LOCAL_SHELL_STRINGDATAROW_INDEX -lt $LOCAL_SHELL_STRINGDATAROW_LENGTH ]
 do
  LOCAL_CHARACTER=${LOCAL_SHELL_STRINGDATAROW:$LOCAL_SHELL_STRINGDATAROW_INDEX:1}

  case "$LOCAL_CHARACTER" in
   "\\")
    let "LOCAL_SHELL_STRINGDATAROW_INDEX++"

    if [ $LOCAL_SHELL_STRINGDATAROW_INDEX -ge $LOCAL_SHELL_STRINGDATAROW_LENGTH ]
    then
     break
    fi

    LOCAL_CHARACTER=${LOCAL_SHELL_STRINGDATAROW:$LOCAL_SHELL_STRINGDATAROW_INDEX:1}
    GLOBAL_STRINGDATAROW_ARRAY[$LOCAL_ARRAY_INDEX]+="\\$LOCAL_CHARACTER"
    ;;
   "\"" )
    let "LOCAL_ARRAY_INDEX++"
    ;;
   *)
    GLOBAL_STRINGDATAROW_ARRAY[$LOCAL_ARRAY_INDEX]+=$LOCAL_CHARACTER
    ;;
  esac

  let "LOCAL_SHELL_STRINGDATAROW_INDEX++"
 done
}

convert_stringhtml_stringtemplate()
{
 local LOCAL_SHELL_STRINGTEMPLATE="$1"

 local LOCAL_SHELL_STRINGTEMPLATE_LENGTH
 local LOCAL_SHELL_STRINGTEMPLATE_INDEX
 local LOCAL_CHARACTER
 local LOCAL_ARRAYDATAROW_INDEX
 local LOCAL_STRINGHTML

 LOCAL_SHELL_STRINGTEMPLATE_LENGTH=${#LOCAL_SHELL_STRINGTEMPLATE}
 LOCAL_SHELL_STRINGTEMPLATE_INDEX=0
 LOCAL_STRINGHTML=""

 while [ $LOCAL_SHELL_STRINGTEMPLATE_INDEX -lt $LOCAL_SHELL_STRINGTEMPLATE_LENGTH ]
 do
  LOCAL_CHARACTER=${LOCAL_SHELL_STRINGTEMPLATE:$LOCAL_SHELL_STRINGTEMPLATE_INDEX:1}

  case "$LOCAL_CHARACTER" in
   "\\")
    if [ $LOCAL_SHELL_STRINGTEMPLATE_INDEX -ge $LOCAL_SHELL_STRINGTEMPLATE_LENGTH ]
    then
     break
    fi

    if [ "${LOCAL_SHELL_STRINGTEMPLATE:$LOCAL_SHELL_STRINGTEMPLATE_INDEX+5:1}" == ":" ]
    then
    LOCAL_ARRAYDATAROW_INDEX="${LOCAL_SHELL_STRINGTEMPLATE:$LOCAL_SHELL_STRINGTEMPLATE_INDEX+3:2}"

     if [ -z "${LOCAL_ARRAYDATAROW_INDEX//[0-9]}" ]
     then
      # Because of "Value too great for base (error token is "08")
      if [ "${LOCAL_ARRAYDATAROW_INDEX:0:1}" == "0" ]
      then
       LOCAL_ARRAYDATAROW_INDEX=${LOCAL_ARRAYDATAROW_INDEX:1:1}
      fi

      case "${LOCAL_SHELL_STRINGTEMPLATE:$LOCAL_SHELL_STRINGTEMPLATE_INDEX+1:2}" in
       ":h")
        LOCAL_STRINGHTML+="$(convert_html_data ${GLOBAL_STRINGDATAROW_ARRAY[$LOCAL_ARRAYDATAROW_INDEX]})"
        let "LOCAL_SHELL_STRINGTEMPLATE_INDEX+=5"
        ;;
       ":a")
        LOCAL_STRINGHTML+="Aposztrof: ${GLOBAL_STRINGDATAROW_ARRAY[$LOCAL_ARRAYDATAROW_INDEX]}"
        let "LOCAL_SHELL_STRINGTEMPLATE_INDEX+=5"
        ;;
       ":q")
        LOCAL_STRINGHTML+="Quote: ${GLOBAL_STRINGDATAROW_ARRAY[$LOCAL_ARRAYDATAROW_INDEX]}"
        let "LOCAL_SHELL_STRINGTEMPLATE_INDEX+=5"
        ;;
       *)
        LOCAL_STRINGHTML+=$LOCAL_CHARACTER
        ;;
      esac
     else
      LOCAL_STRINGHTML+=$LOCAL_CHARACTER
     fi
    else
     LOCAL_STRINGHTML+=$LOCAL_CHARACTER
    fi
    ;;
   *)
    LOCAL_STRINGHTML+=$LOCAL_CHARACTER
    ;;
  esac

  let "LOCAL_SHELL_STRINGTEMPLATE_INDEX++"
 done

 echo "$LOCAL_STRINGHTML"
}

show_header_html()
{
 echo "Content-type: text/html;charset=UTF-8"
 echo

# echo "<!DOCTYPE html>"
 echo "<html>"
 echo "<head>"
 echo " <title>${CONFIG_MAIN_TITLE}</title>"
 echo "</head>"
 echo "<body tabindex='-1' style='margin: 0; padding: 0; border: 0;'>"
}

show_header_jpeg()
{
 echo "Content-type: "
 echo
}

show_footer_html()
{
 echo "</body>"
 echo "</html>"
}

get_geomarray_featureid()
{
 local LOCAL_SHELL_FEATUREID="$1"

 local -a LOCAL_GEOMARRAY_SQLRESULT

 LOCAL_GEOMARRAY_SQLRESULT=$(/usr/bin/psql -c "
 copy (
  select st_xmin(\"geom\"), st_ymin(\"geom\"), st_xmax(\"geom\"), st_ymax(\"geom\")
  from \"$CONFIG_DB_TABLE\"
  where \"$CONFIG_DB_FEATUREIDFIELD\"='$LOCAL_SHELL_FEATUREID'
  limit 1
 )
 to stdout with delimiter as ' ' null as ''"
 )

 echo "$LOCAL_GEOMARRAY_SQLRESULT"
}

get_geomarray_featuregroupid()
{
 local LOCAL_SHELL_FEATUREGROUPID="$1"

 local -a LOCAL_GEOMARRAY_SQLRESULT

 LOCAL_GEOMARRAY_SQLRESULT=$(/usr/bin/psql -c "
 copy (
  select min(st_xmin(\"geom\")), min(st_ymin(\"geom\")), max(st_xmax(\"geom\")), max(st_ymax(\"geom\"))
  from \"$CONFIG_DB_TABLE\"
  where \"$CONFIG_DB_FEATUREGROUPIDFIELD\"='$LOCAL_SHELL_FEATUREGROUPID'
 )
 to stdout with delimiter as ' ' null as ''"
 )

 echo "$LOCAL_GEOMARRAY_SQLRESULT"
}

convert_mapbox_geomarray()
{
 local LOCAL_SHELL_GEOMARRAY=( $1 )

 local LOCAL_MINX
 local LOCAL_MINY
 local LOCAL_MAXX
 local LOCAL_MAXY

 local LOCAL_WIDTHX
 local LOCAL_HEIGHTY
 local LOCAL_CENTERX
 local LOCAL_CENTERY

 local LOCAL_ZOOM_DIVIDE
 local LOCAL_ZOOM_WIDTH
 local LOCAL_ZOOM_HEIGHT
 local LOCAL_WMS_ZOOMLEVEL

 LOCAL_MINX=${LOCAL_SHELL_GEOMARRAY[0]%\.*}
 LOCAL_MINY=${LOCAL_SHELL_GEOMARRAY[1]%\.*}
 LOCAL_MAXX=${LOCAL_SHELL_GEOMARRAY[2]%\.*}
 LOCAL_MAXY=${LOCAL_SHELL_GEOMARRAY[3]%\.*}

 let "LOCAL_WIDTHX=$LOCAL_MAXX - $LOCAL_MINX"
 let "LOCAL_HEIGHTY=$LOCAL_MAXY - $LOCAL_MINY"

 let "LOCAL_CENTERX=$LOCAL_MINX + ($LOCAL_WIDTHX / 2)"
 let "LOCAL_CENTERY=$LOCAL_MINY + ($LOCAL_HEIGHTY /2)"

 for (( LOCAL_WMS_ZOOMLEVEL=CONFIG_WMS_ZOOMLEVEL_MIN; LOCAL_WMS_ZOOMLEVEL<CONFIG_WMS_ZOOMLEVEL_MAX; LOCAL_WMS_ZOOMLEVEL++ ))
 do
  let "LOCAL_ZOOM_DIVIDE=($LOCAL_WMS_ZOOMLEVEL * $CONFIG_WMS_ZOOMLEVEL_STEP) ** 2"

  let "LOCAL_ZOOM_WIDTH=($CONFIG_WMS_BBOX_MAXX - $CONFIG_WMS_BBOX_MINX) / $LOCAL_ZOOM_DIVIDE"
  let "LOCAL_ZOOM_HEIGHT=($CONFIG_WMS_BBOX_MAXY - $CONFIG_WMS_BBOX_MINY) / $LOCAL_ZOOM_DIVIDE"

  if [ $LOCAL_ZOOM_WIDTH -lt $LOCAL_WIDTHX ]
  then
   let "LOCAL_WMS_ZOOMLEVEL--"
   break
  fi

  if [ $LOCAL_ZOOM_HEIGHT -lt $LOCAL_HEIGHTY ]
  then
   let "LOCAL_WMS_ZOOMLEVEL--"
   break
  fi
 done

 echo "$LOCAL_CENTERX $LOCAL_CENTERY $LOCAL_WMS_ZOOMLEVEL"
}
