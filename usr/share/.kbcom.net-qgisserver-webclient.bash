#!/bin/bash

shell_get_value()
{
 local PARAMETER_PATTERN_VARIABLENAME="$1"

 local LOCAL_PATTERN_VARIABLENAME
 local LOCAL_STRING_RESULT

 if [ -z "$QUERY_STRING" ]
 then
  return
 fi

 LOCAL_PATTERN_VARIABLENAME="*$PARAMETER_PATTERN_VARIABLENAME="

 LOCAL_STRING_RESULT="${QUERY_STRING#$LOCAL_PATTERN_VARIABLENAME}"

 if [ "$LOCAL_STRING_RESULT" = "$QUERY_STRING" ]
 then
  return
 fi

 LOCAL_STRING_RESULT="${LOCAL_STRING_RESULT%%&*}"
 LOCAL_STRING_RESULT="${LOCAL_STRING_RESULT//\\/\\\\}"
 LOCAL_STRING_RESULT="${LOCAL_STRING_RESULT//%/\\x}"

 echo -e "$LOCAL_STRING_RESULT"
}

shell_url()
{
 local LOCAL_URL=""

 if [ "$HTTPS" == "on" ]
 then
  LOCAL_URL="https://"
 else
  LOCAL_URL="http://"
 fi

 LOCAL_URL+="${SERVER_NAME}:${SERVER_PORT}${REQUEST_URI%\?*}"

 echo $LOCAL_URL
}

check_value_integer()
{
 local PARAMETER_STRING_INTEGERVALUE="$1"

 if [ ! -z "${PARAMETER_STRING_INTEGERVALUE//[0-9]}" ]
 then
  return
 fi

 echo "$PARAMETER_STRING_INTEGERVALUE"
}

check_value_integerbetweendefault()
{
 local PARAMETER_STRING_INTEGERVALUE="$1"
 local PARAMETER_INTEGER_MIN="$2"
 local PARAMETER_INTEGER_MAX="$3"
 local PARAMETER_INTEGER_DEFAULT="$4"

 if [ -z "$PARAMETER_STRING_INTEGERVALUE" ]
 then
  echo "$PARAMETER_INTEGER_DEFAULT"
  return
 fi

 if [ ! -z "${PARAMETER_STRING_INTEGERVALUE//[0-9]}" ]
 then
  echo "$PARAMETER_INTEGER_DEFAULT"
  return
 fi

 if [ "$PARAMETER_STRING_INTEGERVALUE" -lt "$PARAMETER_INTEGER_MIN" ]
 then
  echo "$PARAMETER_INTEGER_DEFAULT"
  return
 fi

 if [ "$PARAMETER_STRING_INTEGERVALUE" -gt "$PARAMETER_INTEGER_MAX" ]
 then
  echo "$PARAMETER_INTEGER_DEFAULT"
  return
 fi

 echo "$PARAMETER_STRING_INTEGERVALUE"
}

convert_escapedstring_html()
{
 local PARAMETER_STRING_ESCAPEDSTRING="$1"

 local LOCAL_STRING_RESULT

 LOCAL_STRING_RESULT=${PARAMETER_STRING_ESCAPEDSTRING//&/&amp;}
 LOCAL_STRING_RESULT=${LOCAL_STRING_RESULT//</&lt;}
 LOCAL_STRING_RESULT=${LOCAL_STRING_RESULT//\\\\/&frasl;}
 LOCAL_STRING_RESULT=${LOCAL_STRING_RESULT//\\t/&#09;}
 LOCAL_STRING_RESULT=${LOCAL_STRING_RESULT//\\n/<br>\\n}

 echo -e "$LOCAL_STRING_RESULT"
}

convert_escapedstring_url()
{
 local PARAMETER_STRING_ESCAPEDSTRING="$1"

 local LOCAL_STRING_RESULT

 LOCAL_STRING_RESULT=${PARAMETER_STRING_ESCAPEDSTRING//\%/%25}
 LOCAL_STRING_RESULT=${LOCAL_STRING_RESULT//&/%26}
 LOCAL_STRING_RESULT=${LOCAL_STRING_RESULT//=/%3D}
 LOCAL_STRING_RESULT=${LOCAL_STRING_RESULT//\"/%22}
 LOCAL_STRING_RESULT=${LOCAL_STRING_RESULT//\'/%27}
 LOCAL_STRING_RESULT=${LOCAL_STRING_RESULT//\\\\/%2F}
 LOCAL_STRING_RESULT=${LOCAL_STRING_RESULT//\\t/%09}
 LOCAL_STRING_RESULT=${LOCAL_STRING_RESULT//\\n/%0A}

 echo -e "$LOCAL_STRING_RESULT"
}

convert_datatemplate_string()
{
 local PARAMETER_STRING_DATATEMPLATE="$1"
 local -n PARAMETER_ROWARRAY_DATA=$2

 local LOCAL_STRING_RESULT

 LOCAL_STRING_RESULT=""

 LOCAL_INTEGER_COLUMN=$(check_value_integer "${PARAMETER_STRING_DATATEMPLATE:1:2}")

 if [ -z "$LOCAL_INTEGER_COLUMN" ]
 then
  return
 fi

 case "${PARAMETER_STRING_DATATEMPLATE:0:1}" in
  "r")
   LOCAL_STRING_RESULT="${PARAMETER_ROWARRAY_DATA[$LOCAL_INTEGER_COLUMN]}"
   ;;
  "h")
   LOCAL_STRING_RESULT="$(convert_escapedstring_html "${PARAMETER_ROWARRAY_DATA[$LOCAL_INTEGER_COLUMN]}")"
   ;;
  "u")
   LOCAL_STRING_RESULT="$(convert_escapedstring_url "${PARAMETER_ROWARRAY_DATA[$LOCAL_INTEGER_COLUMN]}")"
   ;;
 esac

 echo "$LOCAL_STRING_RESULT"
}

convert_stringtemplate_string()
{
 local PARAMETER_STRING_TEMPLATE="$1"
 local PARAMETER_ROWSTRING_DATA="$2"

 local LOCAL_STRING_TEMPLATE
 local LOCAL_ROWARRAY_DATA
 local LOCAL_STRING_ADD
 local LOCAL_STRING_RESULT

 LOCAL_STRING_TEMPLATE="$PARAMETER_STRING_TEMPLATE"

 PARAMETER_ROWSTRING_DATA="${PARAMETER_ROWSTRING_DATA//$'\t\t'/$'\t \t'}"
 PARAMETER_ROWSTRING_DATA="${PARAMETER_ROWSTRING_DATA//$'\t\t'/$'\t \t'}"

 IFS=$'\t'
 LOCAL_ROWARRAY_DATA=($PARAMETER_ROWSTRING_DATA)

 LOCAL_STRING_RESULT=""

 while true
 do
  LOCAL_STRING_ADD=${LOCAL_STRING_TEMPLATE%%&*}

  if [ ! -z "$LOCAL_STRING_ADD" ]
  then
   LOCAL_STRING_RESULT+="$LOCAL_STRING_ADD"
  fi

  if [ "$LOCAL_STRING_ADD" = "$LOCAL_STRING_TEMPLATE" ]
  then
   break
  fi

  LOCAL_STRING_TEMPLATE="${LOCAL_STRING_TEMPLATE:${#LOCAL_STRING_ADD}}"

  if [ "${LOCAL_STRING_TEMPLATE:0:2}" = "&:" ]
  then
   LOCAL_STRING_RESULT+=$(convert_datatemplate_string "${LOCAL_STRING_TEMPLATE:2:4}" "LOCAL_ROWARRAY_DATA")
   LOCAL_STRING_TEMPLATE="${LOCAL_STRING_TEMPLATE:6}"
  else
   LOCAL_STRING_RESULT+="&"
   LOCAL_STRING_TEMPLATE="${LOCAL_STRING_TEMPLATE:1}"
  fi
 done

 echo "$LOCAL_STRING_RESULT"
}

### USE psql instead WFS ###
# QGIS Server WFS have a problem with non US character and
# does not support srsName and sortBy

request_sql_searchresult()
{
 local PARAMETER_STRING_ID="$1"

 local LOCAL_ROWSTING_RESULT

 LOCAL_ROWSTRING_RESULT=$(/usr/bin/psql -c "
copy (
 select st_xmin(\"geom\"), st_ymin(\"geom\"), st_xmax(\"geom\"), st_ymax(\"geom\")
 from \"$CONFIG_MAPIMAGE_WFSLAYER\"
 where \"$CONFIG_MAPIMAGE_WFSIDFIELD\" = '$PARAMETER_STRING_ID'
 limit 1
)
to stdout with delimiter as E'\t' null as ''"
 )
}

request_sql_geombyid()
{
 local PARAMETER_STRING_ID="$1"

 local LOCAL_ROWSTING_RESULT

 LOCAL_ROWSTRING_RESULT=$(/usr/bin/psql -c "
copy (
 select st_xmin(\"geom\"), st_ymin(\"geom\"), st_xmax(\"geom\"), st_ymax(\"geom\")
 from \"$CONFIG_MAPIMAGE_WFSLAYER\"
 where \"$CONFIG_MAPIMAGE_WFSIDFIELD\" = '$PARAMETER_STRING_ID'
 limit 1
)
to stdout with delimiter as E'\t' null as ''"
 )

 echo "$LOCAL_ROWSTRING_RESULT"
}

request_sql_geombyotherid()
{
 local PARAMETER_STRING_OTHERID="$1"

 local LOCAL_ROWSTRING_RESULT

 LOCAL_ROWSTRING_RESULT=$(/usr/bin/psql -c "
copy (
 select min(st_xmin(\"geom\")), min(st_ymin(\"geom\")), max(st_xmax(\"geom\")), max(st_ymax(\"geom\"))
 from \"$CONFIG_MAPIMAGE_WFSLAYER\"
 where \"$CONFIG_MAPIMAGE_WFSOTHERIDFIELD\" = '$PARAMETER_STRING_OTHERID'
)
to stdout with delimiter as E'\t' null as ''"
)

 echo "$LOCAL_ROWSTRING_RESULT"
}








calculate_bbox()
{
 local LOCAL_PARAMETER_ZOOMLEVEL="$1"
 local LOCAL_PARAMETER_CENTERX="$2"
 local LOCAL_PARAMETER_CENTERY="$3"

 local LOCAL_ZOOM_DIVIDE
 local LOCAL_WMS_MAXWIDTH
 local LOCAL_WMS_MAXHEIGHT
 local LOCAL_HALFWIDTH
 local LOCAL_HALFHEIGHT
 local LOCAL_BBOX_MINX
 local LOCAL_BBOX_MAXX
 local LOCAL_BBOX_MINY
 local LOCAL_BBOX_MAXY
 local LOCAL_OFFSET_X
 local LOCAL_OFFSET_Y


 if [ "$LOCAL_PARAMETER_ZOOMLEVEL" -lt 1 ]
 then
  LOCAL_PARAMETER_ZOOMLEVEL=1
  return
 fi

 LOCAL_ZOOM_DIVIDE=$(( ($LOCAL_PARAMETER_ZOOMLEVEL * $CONFIG_WMS_ZOOMLEVELSTEP) ** 2 ))

 let "LOCAL_MAXWIDTH=$CONFIG_WMS_MAXX - $CONFIG_WMS_MINX"
 let "LOCAL_MAXHEIGHT=$CONFIG_WMS_MAXY - $CONFIG_WMS_MINY"
 let "LOCAL_ZOOM_WIDTH=$LOCAL_MAXWIDTH / $LOCAL_ZOOM_DIVIDE"
 let "LOCAL_ZOOM_HEIGHT=$LOCAL_MAXHEIGHT / $LOCAL_ZOOM_DIVIDE"

 if [ "$LOCAL_ZOOM_WIDTH" -gt "$LOCAL_MAXWIDTH" ]
 then
  let "LOCAL_CENTERX=$CONFIG_WMS_MINX + ($LOCAL_MAX_WIDTH / 2)"
  let "LOCAL_ZOOM_HALFWIDTH=$LOCAL_ZOOM_WIDTH / 2"
  let "LOCAL_BBOX_MINX=$LOCAL_CENTERX - $LOCAL_ZOOM_HALFWIDTH"
  let "LOCAL_BBOX_MAXX=$LOCAL_CENTERX + $LOCAL_ZOOM_HALFWIDTH"
 else
  let "LOCAL_ZOOM_HALFWIDTH=$LOCAL_ZOOM_WIDTH / 2"
  let "LOCAL_BBOX_MINX=$LOCAL_PARAMETER_CENTERX - $LOCAL_ZOOM_HALFWIDTH"
  let "LOCAL_BBOX_MAXX=$LOCAL_PARAMETER_CENTERX + $LOCAL_ZOOM_HALFWIDTH"

  if [ "$LOCAL_BBOX_MINX" -lt "$CONFIG_WMS_MINX" ]
  then
   let "LOCAL_OFFSET_X=$CONFIG_WMS_MINX - $LOCAL_BBOX_MINX"
   let "LOCAL_BBOX_MINX+=$LOCAL_OFFSET_X"
   let "LOCAL_BBOX_MAXX+=$LOCAL_OFFSET_X"
  fi

  if [ "$CONFIG_WMS_MAXX" -lt "$LOCAL_BBOX_MAXX" ]
  then
   let "LOCAL_OFFSET_X=$LOCAL_BBOX_MAXX - $CONFIG_WMS_MAXX"
   let "LOCAL_BBOX_MINX-=$LOCAL_OFFSET_X"
   let "LOCAL_BBOX_MAXX-=$LOCAL_OFFSET_X"
  fi
 fi

 if [ "$LOCAL_ZOOM_HEIGHT" -gt "$LOCAL_MAXHEIGHT" ]
 then
  let "LOCAL_CENTERY=$CONFIG_WMS_MINY + ($LOCAL_MAXHEIGHT / 2)"
  let "LOCAL_ZOOM_HALFHEIGHT=$LOCAL_ZOOM_HEIGHT / 2"
  let "LOCAL_BBOX_MINY=$LOCAL_CENTERY - $LOCAL_ZOOM_HALFHEIGHT"
  let "LOCAL_BBOX_MAXY=$LOCAL_CENTERY + $LOCAL_ZOOM_HALFHEIGHT"
 else
  let "LOCAL_ZOOM_HALFHEIGHT=$LOCAL_ZOOM_HEIGHT / 2"
  let "LOCAL_BBOX_MINY=$LOCAL_PARAMETER_CENTERY - $LOCAL_ZOOM_HALFHEIGHT"
  let "LOCAL_BBOX_MAXY=$LOCAL_PARAMETER_CENTERY + $LOCAL_ZOOM_HALFHEIGHT"

  if [ "$LOCAL_BBOX_MINY" -lt "$CONFIG_WMS_MINY" ]
  then
   let "LOCAL_OFFSET_Y=$CONFIG_WMS_MINY - $LOCAL_BBOX_MINY"
   let "LOCAL_BBOX_MINY+=$LOCAL_OFFSET_Y"
   let "LOCAL_BBOX_MAXY+=$LOCAL_OFFSET_Y"
  fi

  if [ "$CONFIG_WMS_MAXY" -lt "$LOCAL_BBOX_MAXY" ]
  then
   let "LOCAL_OFFSET_Y=$LOCAL_BBOX_MAXY - $CONFIG_WMS_MAXY"
   let "LOCAL_BBOX_MINY-=$LOCAL_OFFSET_Y"
   let "LOCAL_BBOX_MAXY-=$LOCAL_OFFSET_Y"
  fi
 fi

 echo "$LOCAL_BBOX_MINX,$LOCAL_BBOX_MINY,$LOCAL_BBOX_MAXX,$LOCAL_BBOX_MAXY"
}

download_wfs_searchresult()
{
 local LOCAL_STRING_TEMP

 LOCAL_STRING_TEMP="$1"
 LOCAL_STRING_TEMP="${LOCAL_STRING_TEMP#\"}"
 local LOCAL_PATTERN_SEARCH="${LOCAL_STRING_TEMP%\"}"

 local QUERY_STRING

 local LOCAL_NUMBER_WFSMAXFEATURES
 local LOCAL_STRING_WFSRESULTLINE
 local LOCAL_BOOLEAN_ACTIVEROW
 local LOCAL_PATTERN_IDFIELD
 local LOCAL_STRING_IDFIELD
 local LOCAL_STRING_SEARCHFIELD
 local LOCAL_PATTERN_SEARCHFILED

 LOCAL_NUMBER_WFSMAXFEATURES=$(( CONFIG_SEARCHRESULT_MAXIMUMITEMS+1 ))

 QUERY_STRING="request=GetFeature&service=WFS&version=1.0.0&outputFormat=GeoJSON"
 QUERY_STRING+="&map=$CONFIG_QGIS_PROJECTFILE"
 QUERY_STRING+="&typename=$CONFIG_SEARCHRESULT_WFSLAYER"
 QUERY_STRING+="&sortby=$CONFIG_SEARCHRESULT_WFSSEARCHFIELD"
 QUERY_STRING+="&maxFeatures=$LOCAL_NUMBER_WFSMAXFEATURES"
 QUERY_STRING+="&Filter=<Filter>
 <PropertyIsLike wildCard=' ' matchCase='false'>
  <PropertyName>$CONFIG_SEARCHRESULT_WFSSEARCHFIELD</PropertyName>
  <Literal> $LOCAL_PATTERN_SEARCH </Literal>
 </PropertyIsLike>
</Filter>"
 export QUERY_STRING

 LOCAL_BOOLEAN_WFSACTIVEROW=""

 LOCAL_PATTERN_IDFIELD="*\"$CONFIG_SEARCHRESULT_WFSIDFIELD\":"
 LOCAL_PATTERN_SEARCHFIELD="*\"$CONFIG_SEARCHRESULT_WFSSEARCHFIELD\":"

 /usr/bin/cgi-fcgi -bind -connect $CONFIG_QGISSERVER_SOCKET |\
 while IFS='' read -r LOCAL_STRING_WFSRESULTLINE
 do
  if [[ $LOCAL_STRING_WFSRESULTLINE = *"\"properties\":{"* ]]
  then
   LOCAL_BOOLEAN_WFSACTIVEROW="y"
  fi

  if [ ! -z "$LOCAL_BOOLEAN_WFSACTIVEROW" ]
  then
   if [[ $LOCAL_STRING_WFSRESULTLINE = *"$CONFIG_SEARCHRESULT_WFSIDFIELD"* ]]
   then
    LOCAL_STRING_TEMP="${LOCAL_STRING_WFSRESULTLINE#$LOCAL_PATTERN_IDFIELD}"
    LOCAL_STRING_TEMP="${LOCAL_STRING_TEMP%,}"
    LOCAL_STRING_TEMP="${LOCAL_STRING_TEMP#\"}"
    LOCAL_STRING_IDFIELD="${LOCAL_STRING_TEMP%\"}"
   fi

   if [[ $LOCAL_STRING_WFSRESULTLINE = *"$CONFIG_SEARCHRESULT_WFSSEARCHFIELD"* ]]
   then
    LOCAL_STRING_TEMP="${LOCAL_STRING_WFSRESULTLINE#$LOCAL_PATTERN_SEARCHFIELD}"
    LOCAL_STRING_TEMP="${LOCAL_STRING_TEMP%,}"
    LOCAL_STRING_TEMP="${LOCAL_STRING_TEMP#\"}"
    LOCAL_STRING_SEARCHFIELD="${LOCAL_STRING_TEMP%\"}"
   fi

   if [[ $LOCAL_STRING_WFSRESULTLINE = *"}"* ]]
   then
    if [ ! -z "$LOCAL_STRING_IDFIELD" ] && [ ! -z "$LOCAL_STRING_SEARCHFIELD" ]
    then
     printf "%s\t%s\n" "$LOCAL_STRING_SEARCHFIELD" "$LOCAL_STRING_IDFIELD"
    fi

    LOCAL_BOOLEAN_WFSACTIVEROW=""
   fi
  fi
 done
}

download_image_wms()
{
 local LOCAL_PARAMETER_BBOX="$1"

 local QUERY_STRING

 QUERY_STRING="request=GetMap&service=WMS&version=1.3.0"
 QUERY_STRING+="&map=$CONFIG_QGIS_PROJECTFILE"

 QUERY_STRING+="&layers=$CONFIG_WMS_MAPIMAGELAYERS"

 QUERY_STRING+="&styles=$CONFIG_WMS_STYLES"
 QUERY_STRING+="&crs=$CONFIG_WMS_CRS"
 QUERY_STRING+="&time=$CONFIG_WMS_TIMEFORMAT"

 QUERY_STRING+="&bbox=$LOCAL_PARAMETER_BBOX"

 QUERY_STRING+="&transparent=$CONFIG_WMS_MAPIMAGETRANSPARENT"
 QUERY_STRING+="&bgcolor=$CONFIG_WMS_MAPIMAGEBGCOLOR"
 QUERY_STRING+="&width=$CONFIG_WMS_MAPIMAGEWIDTH"
 QUERY_STRING+="&height=$CONFIG_WMS_MAPIMAGEHEIGHT"
 QUERY_STRING+="&format=$CONFIG_WMS_MAPIMAGEFORMAT"

 /usr/bin/cgi-fcgi -bind -connect $CONFIG_QGISSERVER_SOCKET
}

download_info_wms()
{
 local LOCAL_PARAMETER_BBOX="$1"
 local LOCAL_PARAMETER_X="$2"
 local LOCAL_PARAMETER_Y="$3"

 local QUERY_STRING

 QUERY_STRING="request=GetFeatureInfo&service=WMS&version=1.3.0"
 QUERY_STRING+="&map=$CONFIG_QGIS_PROJECTFILE"

 QUERY_STRING+="&info_format=text/html"
 QUERY_STRING+="&layers=$CONFIG_WMS_MAPTIPLAYERS"
 QUERY_STRING+="&query_layers=$CONFIG_WMS_MAPTIPLAYERS"

 QUERY_STRING+="&styles=$CONFIG_WMS_STYLES"
 QUERY_STRING+="&crs=$CONFIG_WMS_CRS"

 QUERY_STRING+="&bbox=$LOCAL_PARAMETER_BBOX"

 QUERY_STRING+="&width=$CONFIG_WMS_MAPIMAGEWIDTH"
 QUERY_STRING+="&height=$CONFIG_WMS_MAPIMAGEHEIGHT"
 QUERY_STRING+="&i=$LOCAL_PARAMETER_X"
 QUERY_STRING+="&j=$LOCAL_PARAMETER_Y"

 /usr/bin/cgi-fcgi -bind -connect $CONFIG_QGISSERVER_SOCKET
}





show_header_html()
{
 echo "Content-type: text/html;charset=UTF-8"
 echo

# echo "<!DOCTYPE html>"
 echo "<html>"
 echo "<head>"
 echo " <title>${CONFIG_MAIN_TITLE}</title>"
 echo "</head>"
 echo "<body tabindex='-1' style='margin: 0; padding: 0; border: 0;'>"
}

show_header_jpeg()
{
 echo "Content-type: "
 echo
}

show_footer_html()
{
 echo "</body>"
 echo "</html>"
}


convert_mapbox_geomarray()
{
 local LOCAL_PARAMETER_GEOMARRAY=( $1 )

 local LOCAL_MINX
 local LOCAL_MINY
 local LOCAL_MAXX
 local LOCAL_MAXY

 local LOCAL_WIDTHX
 local LOCAL_HEIGHTY
 local LOCAL_CENTERX
 local LOCAL_CENTERY

 local LOCAL_ZOOM_DIVIDE
 local LOCAL_ZOOM_WIDTH
 local LOCAL_ZOOM_HEIGHT
 local LOCAL_WMS_ZOOMLEVEL

 LOCAL_MINX=${LOCAL_PARAMETER_GEOMARRAY[0]%\.*}
 LOCAL_MINY=${LOCAL_PARAMETER_GEOMARRAY[1]%\.*}
 LOCAL_MAXX=${LOCAL_PARAMETER_GEOMARRAY[2]%\.*}
 LOCAL_MAXY=${LOCAL_PARAMETER_GEOMARRAY[3]%\.*}

 let "LOCAL_WIDTHX=$LOCAL_MAXX - $LOCAL_MINX"
 let "LOCAL_HEIGHTY=$LOCAL_MAXY - $LOCAL_MINY"

 let "LOCAL_CENTERX=$LOCAL_MINX + ($LOCAL_WIDTHX / 2)"
 let "LOCAL_CENTERY=$LOCAL_MINY + ($LOCAL_HEIGHTY /2)"

 for (( LOCAL_WMS_ZOOMLEVEL=CONFIG_WMS_ZOOMLEVEL_MIN; LOCAL_WMS_ZOOMLEVEL<CONFIG_WMS_ZOOMLEVEL_MAX; LOCAL_WMS_ZOOMLEVEL++ ))
 do
  let "LOCAL_ZOOM_DIVIDE=($LOCAL_WMS_ZOOMLEVEL * $CONFIG_WMS_ZOOMLEVEL_STEP) ** 2"

  let "LOCAL_ZOOM_WIDTH=($CONFIG_WMS_MAXX - $CONFIG_WMS_MINX) / $LOCAL_ZOOM_DIVIDE"
  let "LOCAL_ZOOM_HEIGHT=($CONFIG_WMS_MAXY - $CONFIG_WMS_MINY) / $LOCAL_ZOOM_DIVIDE"

  if [ $LOCAL_ZOOM_WIDTH -lt $LOCAL_WIDTHX ]
  then
   let "LOCAL_WMS_ZOOMLEVEL--"
   break
  fi

  if [ $LOCAL_ZOOM_HEIGHT -lt $LOCAL_HEIGHTY ]
  then
   let "LOCAL_WMS_ZOOMLEVEL--"
   break
  fi
 done

 echo "$LOCAL_CENTERX $LOCAL_CENTERY $LOCAL_WMS_ZOOMLEVEL"
}
