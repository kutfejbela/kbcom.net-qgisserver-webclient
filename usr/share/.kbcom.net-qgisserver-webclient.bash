#!/bin/bash

shell_exit()
{
 echo "Content-type: text/html;charset=UTF-8"
 echo
 exit
}

shell_get_value()
{
 local PARAMETER_PATTERN_VARIABLENAME="$1"

 local LOCAL_PATTERN_VARIABLENAME
 local LOCAL_STRING_RESULT

 if [ -z "$QUERY_STRING" ]
 then
  return
 fi

 if [ "${QUERY_STRING:0:${#PARAMETER_PATTERN_VARIABLENAME}}" = "$PARAMETER_PATTERN_VARIABLENAME" ]
 then
  LOCAL_STRING_RESULT="${QUERY_STRING:${#PARAMETER_PATTERN_VARIABLENAME} + 1}"
 else
  LOCAL_PATTERN_VARIABLENAME="*&$PARAMETER_PATTERN_VARIABLENAME="

  LOCAL_STRING_RESULT="${QUERY_STRING#$LOCAL_PATTERN_VARIABLENAME}"

  if [ "$LOCAL_STRING_RESULT" = "$QUERY_STRING" ]
  then
   return
  fi
 fi

 LOCAL_STRING_RESULT="${LOCAL_STRING_RESULT%%&*}"
 LOCAL_STRING_RESULT="${LOCAL_STRING_RESULT//\\/\\\\}"
 LOCAL_STRING_RESULT="${LOCAL_STRING_RESULT//%/\\x}"

 echo -e "$LOCAL_STRING_RESULT"
}

shell_url()
{
 local LOCAL_URL=""

 if [ "$HTTPS" == "on" ]
 then
  LOCAL_URL="https://"
 else
  LOCAL_URL="http://"
 fi

 LOCAL_URL+="${SERVER_NAME}:${SERVER_PORT}${REQUEST_URI%\?*}"

 echo $LOCAL_URL
}

check_value_integer()
{
 local PARAMETER_STRING_INTEGERVALUE="$1"

 if [ ! -z "${PARAMETER_STRING_INTEGERVALUE//[0-9]}" ]
 then
  return
 fi

 echo "$PARAMETER_STRING_INTEGERVALUE"
}

check_value_integerbetween()
{
 local PARAMETER_STRING_INTEGERVALUE="$1"
 local PARAMETER_INTEGER_BETWEEN1="$2"
 local PARAMETER_INTEGER_BETWEEN2="$3"

 local LOCAL_STRING_INTEGERPOSITIVEVALUE


 if [ -z "$PARAMETER_STRING_INTEGERVALUE" ]
 then
  echo false
 fi

 LOCAL_STRING_INTEGERPOSITIVEVALUE=${PARAMETER_STRING_INTEGERVALUE#-}

 if [ ! -z "${LOCAL_STRING_INTEGERPOSITIVEVALUE//[0-9]}" ]
 then
  echo false
 fi

 if [ "$PARAMETER_INTEGER_BETWEEN1" -le "$PARAMETER_STRING_INTEGERVALUE" ] && [ "$PARAMETER_STRING_INTEGERVALUE" -le "$PARAMETER_INTEGER_BETWEEN2" ]
 then
  echo true
 fi

 if [ "$PARAMETER_INTEGER_BETWEEN2" -le "$PARAMETER_STRING_INTEGERVALUE" ] && [ "$PARAMETER_STRING_INTEGERVALUE" -le "$PARAMETER_INTEGER_BETWEEN1" ]
 then
  echo true
 fi

 echo false
}

check_value_integerbetweendefault()
{
 local PARAMETER_STRING_INTEGERVALUE="$1"
 local PARAMETER_INTEGER_BETWEEN1="$2"
 local PARAMETER_INTEGER_BETWEEN2="$3"
 local PARAMETER_INTEGER_DEFAULT="$4"

 local LOCAL_STRING_INTEGERPOSITIVEVALUE


 if [ -z "$PARAMETER_STRING_INTEGERVALUE" ]
 then
  echo "$PARAMETER_INTEGER_DEFAULT"
  return
 fi

 LOCAL_STRING_INTEGERPOSITIVEVALUE=${PARAMETER_STRING_INTEGERVALUE#-}

 if [ ! -z "${LOCAL_STRING_INTEGERPOSITIVEVALUE//[0-9]}" ]
 then
  echo "$PARAMETER_INTEGER_DEFAULT"
  return
 fi

 if [ "$PARAMETER_INTEGER_BETWEEN1" -le "$PARAMETER_STRING_INTEGERVALUE" ] && [ "$PARAMETER_STRING_INTEGERVALUE" -le "$PARAMETER_INTEGER_BETWEEN2" ]
 then
  echo "$PARAMETER_STRING_INTEGERVALUE"
  return
 fi

 if [ "$PARAMETER_INTEGER_BETWEEN2" -le "$PARAMETER_STRING_INTEGERVALUE" ] && [ "$PARAMETER_STRING_INTEGERVALUE" -le "$PARAMETER_INTEGER_BETWEEN1" ]
 then
  echo "$PARAMETER_STRING_INTEGERVALUE"
  return
 fi

 echo "$PARAMETER_INTEGER_DEFAULT"
}

convert_spaceseparetedstring_sqllikestring()
{
 local PARAMETER_STRING_STRING="$1"

 local LOCAL_STRING_RESULT

 LOCAL_STRING_RESULT=${PARAMETER_STRING_STRING//\\/\\\\}
 LOCAL_STRING_RESULT=${LOCAL_STRING_RESULT//%/\\%}
 LOCAL_STRING_RESULT=${LOCAL_STRING_RESULT//_/\\_}
 LOCAL_STRING_RESULT=${LOCAL_STRING_RESULT// /%}

 echo "$LOCAL_STRING_RESULT"
}

convert_escapedstring_html()
{
 local PARAMETER_STRING_ESCAPEDSTRING="$1"

 local LOCAL_STRING_RESULT

 LOCAL_STRING_RESULT=${PARAMETER_STRING_ESCAPEDSTRING//&/&amp;}
 LOCAL_STRING_RESULT=${LOCAL_STRING_RESULT//</&lt;}
 LOCAL_STRING_RESULT=${LOCAL_STRING_RESULT//\\\\/&frasl;}
 LOCAL_STRING_RESULT=${LOCAL_STRING_RESULT//\\t/&#09;}
 LOCAL_STRING_RESULT=${LOCAL_STRING_RESULT//\\n/<br>\\n}

 echo -e "$LOCAL_STRING_RESULT"
}

convert_escapedstring_url()
{
 local PARAMETER_STRING_ESCAPEDSTRING="$1"

 local LOCAL_STRING_RESULT

 LOCAL_STRING_RESULT=${PARAMETER_STRING_ESCAPEDSTRING//\%/%25}
 LOCAL_STRING_RESULT=${LOCAL_STRING_RESULT//&/%26}
 LOCAL_STRING_RESULT=${LOCAL_STRING_RESULT//=/%3D}
 LOCAL_STRING_RESULT=${LOCAL_STRING_RESULT//\"/%22}
 LOCAL_STRING_RESULT=${LOCAL_STRING_RESULT//\'/%27}
 LOCAL_STRING_RESULT=${LOCAL_STRING_RESULT//\\\\/%2F}
 LOCAL_STRING_RESULT=${LOCAL_STRING_RESULT//\\t/%09}
 LOCAL_STRING_RESULT=${LOCAL_STRING_RESULT//\\n/%0A}

 echo -e "$LOCAL_STRING_RESULT"
}

convert_datatemplate_string()
{
 local PARAMETER_STRING_DATATEMPLATE="$1"
 local -n PARAMETER_ROWARRAY_DATA=$2

 local LOCAL_STRING_RESULT

 LOCAL_STRING_RESULT=""

 LOCAL_INTEGER_COLUMN=$(check_value_integer "${PARAMETER_STRING_DATATEMPLATE:1:2}")

 if [ -z "$LOCAL_INTEGER_COLUMN" ]
 then
  return
 fi

 case "${PARAMETER_STRING_DATATEMPLATE:0:1}" in
  "r")
   LOCAL_STRING_RESULT="${PARAMETER_ROWARRAY_DATA[$LOCAL_INTEGER_COLUMN]}"
   ;;
  "h")
   LOCAL_STRING_RESULT="$(convert_escapedstring_html "${PARAMETER_ROWARRAY_DATA[$LOCAL_INTEGER_COLUMN]}")"
   ;;
  "u")
   LOCAL_STRING_RESULT="$(convert_escapedstring_url "${PARAMETER_ROWARRAY_DATA[$LOCAL_INTEGER_COLUMN]}")"
   ;;
 esac

 echo "$LOCAL_STRING_RESULT"
}

convert_stringtemplate_string()
{
 local PARAMETER_STRING_TEMPLATE="$1"
 local PARAMETER_ROWSTRING_DATA="$2"

 local LOCAL_STRING_TEMPLATE
 local LOCAL_ROWARRAY_DATA
 local LOCAL_STRING_ADD
 local LOCAL_STRING_RESULT

 LOCAL_STRING_TEMPLATE="$PARAMETER_STRING_TEMPLATE"

 PARAMETER_ROWSTRING_DATA="${PARAMETER_ROWSTRING_DATA//$'\t\t'/$'\t \t'}"
 PARAMETER_ROWSTRING_DATA="${PARAMETER_ROWSTRING_DATA//$'\t\t'/$'\t \t'}"

 IFS=$'\t'
 LOCAL_ROWARRAY_DATA=($PARAMETER_ROWSTRING_DATA)

 LOCAL_STRING_RESULT=""

 while true
 do
  LOCAL_STRING_ADD=${LOCAL_STRING_TEMPLATE%%&*}

  if [ ! -z "$LOCAL_STRING_ADD" ]
  then
   LOCAL_STRING_RESULT+="$LOCAL_STRING_ADD"
  fi

  if [ "$LOCAL_STRING_ADD" = "$LOCAL_STRING_TEMPLATE" ]
  then
   break
  fi

  LOCAL_STRING_TEMPLATE="${LOCAL_STRING_TEMPLATE:${#LOCAL_STRING_ADD}}"

  if [ "${LOCAL_STRING_TEMPLATE:0:2}" = "&:" ]
  then
   LOCAL_STRING_RESULT+=$(convert_datatemplate_string "${LOCAL_STRING_TEMPLATE:2:4}" "LOCAL_ROWARRAY_DATA")
   LOCAL_STRING_TEMPLATE="${LOCAL_STRING_TEMPLATE:6}"
  else
   LOCAL_STRING_RESULT+="&"
   LOCAL_STRING_TEMPLATE="${LOCAL_STRING_TEMPLATE:1}"
  fi
 done

 echo "$LOCAL_STRING_RESULT"
}

convert_real_integer()
{
 local PARAMETER_STRING_INTEGERVALUE="$1"
 local PARAMETER_INTEGER_DECIMAL="$2"

 if [ "$PARAMETER_INTEGER_DECIMAL" == "0" ]
 then
  echo "$PARAMETER_STRING_INTEGERVALUE"
 else
  echo "${PARAMETER_STRING_INTEGERVALUE:0:-$PARAMETER_INTEGER_DECIMAL}.${PARAMETER_STRING_INTEGERVALUE: -$PARAMETER_INTEGER_DECIMAL}"
 fi
}

calculate_bbox()
{
 local PARAMETER_INTEGER_MAPIMAGEWIDTH="$1"
 local PARAMETER_INTEGER_ZOOMLEVEL="$2"
 local PARAMETER_INTEGER_LEFTX="$3"
 local PARAMETER_INTEGER_BOTTOMY="$4"

 local LOCAL_INTEGER_ZOOMDIVIDE
 local LOCAL_INTEGER_ZOOMWIDTH
 local LOCAL_INTEGER_ZOOMHEIGHT
 local LOCAL_BBOX_MINIMUMX
 local LOCAL_BBOX_MAXIMUMX
 local LOCAL_BBOX_MINIMUMY
 local LOCAL_BBOX_MAXIMUMY

 LOCAL_INTEGER_ZOOMDIVIDE=$(( ($PARAMETER_INTEGER_ZOOMLEVEL * $CONFIG_WMS_ZOOMLEVELSTEP) ** 2 ))

 LOCAL_INTEGER_ZOOMWIDTH=$(( ($CONFIG_WMS_MAXIMUMX - $CONFIG_WMS_MINIMUMX) / $LOCAL_INTEGER_ZOOMDIVIDE * $PARAMETER_INTEGER_MAPIMAGEWIDTH / $CONFIG_WMS_IMAGEMAXIMUMWIDTH ))
 LOCAL_INTEGER_ZOOMHEIGHT=$(( ($CONFIG_WMS_MAXIMUMY - $CONFIG_WMS_MINIMUMY) / $LOCAL_INTEGER_ZOOMDIVIDE ))

 LOCAL_BBOX_MINIMUMX=$PARAMETER_INTEGER_LEFTX
 LOCAL_BBOX_MAXIMUMX=$(( $PARAMETER_INTEGER_LEFTX + $LOCAL_INTEGER_ZOOMWIDTH ))
 LOCAL_BBOX_MINIMUMY=$PARAMETER_INTEGER_BOTTOMY
 LOCAL_BBOX_MAXIMUMY=$(( $PARAMETER_INTEGER_BOTTOMY + $LOCAL_INTEGER_ZOOMHEIGHT ))

 if [ "$CONFIG_WMS_COORDINATEDECIMAL" -ne 0 ]
 then
  LOCAL_BBOX_MINIMUMX=$(convert_real_integer "$LOCAL_BBOX_MINIMUMX" "$CONFIG_WMS_COORDINATEDECIMAL")
  LOCAL_BBOX_MAXIMUMX=$(convert_real_integer "$LOCAL_BBOX_MAXIMUMX" "$CONFIG_WMS_COORDINATEDECIMAL")
  LOCAL_BBOX_MINIMUMY=$(convert_real_integer "$LOCAL_BBOX_MINIMUMY" "$CONFIG_WMS_COORDINATEDECIMAL")
  LOCAL_BBOX_MAXIMUMY=$(convert_real_integer "$LOCAL_BBOX_MAXIMUMY" "$CONFIG_WMS_COORDINATEDECIMAL")
 fi

 echo "$LOCAL_BBOX_MINIMUMX,$LOCAL_BBOX_MINIMUMY,$LOCAL_BBOX_MAXIMUMX,$LOCAL_BBOX_MAXIMUMY"
}

request_image_wms()
{
 local PARAMETER_INTEGER_MAPIMAGEWIDTH="$1"
 local PARAMETER_BBOX="$2"

 local QUERY_STRING

 QUERY_STRING="request=GetMap&service=WMS&version=1.3.0"
 QUERY_STRING+="&map=$CONFIG_QGIS_PROJECTFILE"

 QUERY_STRING+="&layers=$CONFIG_MAPIMAGE_WMSLAYERS"

 QUERY_STRING+="&styles=$CONFIG_WMS_STYLES"
 QUERY_STRING+="&crs=$CONFIG_WMS_CRS"
 QUERY_STRING+="&time=$CONFIG_WMS_TIMEFORMAT"

 QUERY_STRING+="&bbox=$PARAMETER_BBOX"

 QUERY_STRING+="&transparent=$CONFIG_WMS_TRANSPARENT"
 QUERY_STRING+="&bgcolor=$CONFIG_WMS_BGCOLOR"
 QUERY_STRING+="&width=$PARAMETER_INTEGER_MAPIMAGEWIDTH"
 QUERY_STRING+="&height=$CONFIG_WMS_IMAGEHEIGHT"
 QUERY_STRING+="&format=$CONFIG_WMS_FORMAT"
#echo "$QUERY_STRING"

 /usr/bin/cgi-fcgi -bind -connect $CONFIG_QGISSERVER_SOCKET
}

request_featureinfo_wms()
{
 local PARAMETER_INTEGER_MAPIMAGEWIDTH="$1"
 local PARAMETER_BBOX="$2"
 local PARAMETER_INTEGER_X="$3"
 local PARAMETER_INTEGER_Y="$4"

 local QUERY_STRING

 QUERY_STRING="request=GetFeatureInfo&service=WMS&version=1.3.0"
 QUERY_STRING+="&map=$CONFIG_QGIS_PROJECTFILE"

 QUERY_STRING+="&info_format=text/html"
 QUERY_STRING+="&layers=$CONFIG_WMS_MAPTIPLAYERS"
 QUERY_STRING+="&query_layers=$CONFIG_WMS_MAPTIPLAYERS"

 QUERY_STRING+="&styles=$CONFIG_WMS_STYLES"
 QUERY_STRING+="&crs=$CONFIG_WMS_CRS"

 QUERY_STRING+="&bbox=$PARAMETER_BBOX"

 QUERY_STRING+="&width=$PARAMETER_INTEGER_MAPIMAGEWIDTH"
 QUERY_STRING+="&height=$CONFIG_WMS_IMAGEHEIGHT"
 QUERY_STRING+="&i=$PARAMETER_INTEGER_X"
 QUERY_STRING+="&j=$PARAMETER_INTEGER_Y"

 /usr/bin/cgi-fcgi -bind -connect $CONFIG_QGISSERVER_SOCKET
}











request_wfs_searchresult()
{
 local LOCAL_STRING_TEMP

 LOCAL_STRING_TEMP="$1"
 LOCAL_STRING_TEMP="${LOCAL_STRING_TEMP#\"}"
 local LOCAL_PATTERN_SEARCH="${LOCAL_STRING_TEMP%\"}"

 local QUERY_STRING

 local LOCAL_NUMBER_WFSMAXFEATURES
 local LOCAL_STRING_WFSRESULTLINE
 local LOCAL_BOOLEAN_ACTIVEROW
 local LOCAL_PATTERN_IDFIELD
 local LOCAL_STRING_IDFIELD
 local LOCAL_STRING_SEARCHFIELD
 local LOCAL_PATTERN_SEARCHFILED

 LOCAL_NUMBER_WFSMAXFEATURES=$(( CONFIG_SEARCHRESULT_MAXIMUMITEMS+1 ))

 QUERY_STRING="request=GetFeature&service=WFS&version=1.0.0&outputFormat=GeoJSON"
 QUERY_STRING+="&map=$CONFIG_QGIS_PROJECTFILE"
 QUERY_STRING+="&typename=$CONFIG_SEARCHRESULT_WFSLAYER"
 QUERY_STRING+="&sortby=$CONFIG_SEARCHRESULT_WFSSEARCHFIELD"
 QUERY_STRING+="&maxFeatures=$LOCAL_NUMBER_WFSMAXFEATURES"
 QUERY_STRING+="&Filter=<Filter>
 <PropertyIsLike wildCard=' ' matchCase='false'>
  <PropertyName>$CONFIG_SEARCHRESULT_WFSSEARCHFIELD</PropertyName>
  <Literal> $LOCAL_PATTERN_SEARCH </Literal>
 </PropertyIsLike>
</Filter>"
 export QUERY_STRING

 LOCAL_BOOLEAN_WFSACTIVEROW=""

 LOCAL_PATTERN_IDFIELD="*\"$CONFIG_SEARCHRESULT_WFSIDFIELD\":"
 LOCAL_PATTERN_SEARCHFIELD="*\"$CONFIG_SEARCHRESULT_WFSSEARCHFIELD\":"

 /usr/bin/cgi-fcgi -bind -connect $CONFIG_QGISSERVER_SOCKET |\
 while IFS='' read -r LOCAL_STRING_WFSRESULTLINE
 do
  if [[ $LOCAL_STRING_WFSRESULTLINE = *"\"properties\":{"* ]]
  then
   LOCAL_BOOLEAN_WFSACTIVEROW="y"
  fi

  if [ ! -z "$LOCAL_BOOLEAN_WFSACTIVEROW" ]
  then
   if [[ $LOCAL_STRING_WFSRESULTLINE = *"$CONFIG_SEARCHRESULT_WFSIDFIELD"* ]]
   then
    LOCAL_STRING_TEMP="${LOCAL_STRING_WFSRESULTLINE#$LOCAL_PATTERN_IDFIELD}"
    LOCAL_STRING_TEMP="${LOCAL_STRING_TEMP%,}"
    LOCAL_STRING_TEMP="${LOCAL_STRING_TEMP#\"}"
    LOCAL_STRING_IDFIELD="${LOCAL_STRING_TEMP%\"}"
   fi

   if [[ $LOCAL_STRING_WFSRESULTLINE = *"$CONFIG_SEARCHRESULT_WFSSEARCHFIELD"* ]]
   then
    LOCAL_STRING_TEMP="${LOCAL_STRING_WFSRESULTLINE#$LOCAL_PATTERN_SEARCHFIELD}"
    LOCAL_STRING_TEMP="${LOCAL_STRING_TEMP%,}"
    LOCAL_STRING_TEMP="${LOCAL_STRING_TEMP#\"}"
    LOCAL_STRING_SEARCHFIELD="${LOCAL_STRING_TEMP%\"}"
   fi

   if [[ $LOCAL_STRING_WFSRESULTLINE = *"}"* ]]
   then
    if [ ! -z "$LOCAL_STRING_IDFIELD" ] && [ ! -z "$LOCAL_STRING_SEARCHFIELD" ]
    then
     printf "%s\t%s\n" "$LOCAL_STRING_IDFIELD" "$LOCAL_STRING_SEARCHFIELD"
    fi

    LOCAL_BOOLEAN_WFSACTIVEROW=""
   fi
  fi
 done
}

















convert_mapbox_geomarray()
{
 local LOCAL_PARAMETER_GEOMARRAY=( $1 )

 local LOCAL_MINX
 local LOCAL_MINY
 local LOCAL_MAXX
 local LOCAL_MAXY

 local LOCAL_WIDTHX
 local LOCAL_HEIGHTY
 local LOCAL_CENTERX
 local LOCAL_CENTERY

 local LOCAL_ZOOM_DIVIDE
 local LOCAL_ZOOM_WIDTH
 local LOCAL_ZOOM_HEIGHT
 local LOCAL_WMS_ZOOMLEVEL

 LOCAL_MINX=${LOCAL_PARAMETER_GEOMARRAY[0]%\.*}
 LOCAL_MINY=${LOCAL_PARAMETER_GEOMARRAY[1]%\.*}
 LOCAL_MAXX=${LOCAL_PARAMETER_GEOMARRAY[2]%\.*}
 LOCAL_MAXY=${LOCAL_PARAMETER_GEOMARRAY[3]%\.*}

 let "LOCAL_WIDTHX=$LOCAL_MAXX - $LOCAL_MINX"
 let "LOCAL_HEIGHTY=$LOCAL_MAXY - $LOCAL_MINY"

 let "LOCAL_CENTERX=$LOCAL_MINX + ($LOCAL_WIDTHX / 2)"
 let "LOCAL_CENTERY=$LOCAL_MINY + ($LOCAL_HEIGHTY /2)"

 for (( LOCAL_WMS_ZOOMLEVEL=CONFIG_WMS_ZOOMLEVEL_MIN; LOCAL_WMS_ZOOMLEVEL<CONFIG_WMS_ZOOMLEVEL_MAX; LOCAL_WMS_ZOOMLEVEL++ ))
 do
  let "LOCAL_ZOOM_DIVIDE=($LOCAL_WMS_ZOOMLEVEL * $CONFIG_WMS_ZOOMLEVEL_STEP) ** 2"

  let "LOCAL_ZOOM_WIDTH=($CONFIG_WMS_MAXX - $CONFIG_WMS_MINX) / $LOCAL_ZOOM_DIVIDE"
  let "LOCAL_ZOOM_HEIGHT=($CONFIG_WMS_MAXY - $CONFIG_WMS_MINY) / $LOCAL_ZOOM_DIVIDE"

  if [ $LOCAL_ZOOM_WIDTH -lt $LOCAL_WIDTHX ]
  then
   let "LOCAL_WMS_ZOOMLEVEL--"
   break
  fi

  if [ $LOCAL_ZOOM_HEIGHT -lt $LOCAL_HEIGHTY ]
  then
   let "LOCAL_WMS_ZOOMLEVEL--"
   break
  fi
 done

 echo "$LOCAL_CENTERX $LOCAL_CENTERY $LOCAL_WMS_ZOOMLEVEL"
}




### USE psql instead WFS ###
# QGIS Server WFS have a problem with non US character and
# does not support srsName and sortBy

request_sql_searchresult()
{
 local PARAMETER_STRING_SQLLIKE="$1"

 local LOCAL_STRING_SQLQUERY

 LOCAL_STRING_SQLQUERY="/usr/bin/psql -c \"
  copy (
   select \\\"$CONFIG_SEARCHRESULT_WFSIDFIELD\\\", \\\"$CONFIG_SEARCHRESULT_WFSSEARCHFIELD\\\"
   from \\\"$CONFIG_SEARCHRESULT_WFSLAYER\\\"
   where \\\"cim\\\" ilike '%$PARAMETER_STRING_SQLLIKE%'
   order by \\\"$CONFIG_SEARCHRESULT_WFSSEARCHFIELD\\\"
  )
  to stdout with delimiter as E'\\t' null as ''
 \""

 echo "$(eval $LOCAL_STRING_SQLQUERY)"
}

request_sql_geombyid()
{
 local PARAMETER_STRING_ID="$1"

 local LOCAL_ROWSTING_RESULT

 LOCAL_ROWSTRING_RESULT=$(/usr/bin/psql -c "
copy (
 select st_xmin(\"geom\"), st_ymin(\"geom\"), st_xmax(\"geom\"), st_ymax(\"geom\")
 from \"$CONFIG_MAPIMAGE_WFSLAYER\"
 where \"$CONFIG_MAPIMAGE_WFSIDFIELD\" = '$PARAMETER_STRING_ID'
 limit 1
)
to stdout with delimiter as E'\t' null as ''"
 )

 echo "$LOCAL_ROWSTRING_RESULT"
}

request_sql_geombyotherid()
{
 local PARAMETER_STRING_OTHERID="$1"

 local LOCAL_ROWSTRING_RESULT

 LOCAL_ROWSTRING_RESULT=$(/usr/bin/psql -c "
copy (
 select min(st_xmin(\"geom\")), min(st_ymin(\"geom\")), max(st_xmax(\"geom\")), max(st_ymax(\"geom\"))
 from \"$CONFIG_MAPIMAGE_WFSLAYER\"
 where \"$CONFIG_MAPIMAGE_WFSOTHERIDFIELD\" = '$PARAMETER_STRING_OTHERID'
)
to stdout with delimiter as E'\t' null as ''"
)

 echo "$LOCAL_ROWSTRING_RESULT"
}
